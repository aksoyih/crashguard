<?php

declare(strict_types=1);

namespace Aksoyih\Crashguard;

/**
 * Markdown renderer for LLM-friendly output
 */
class MarkdownRenderer implements RendererInterface
{
    public function render(array $errorData): string
    {
        $md = "## Error Summary\n\n";
        $md .= "- **Message**: " . $errorData['message'] . "\n";
        $md .= "- **Type**: `" . $errorData['class'] . "`\n";
        $md .= "- **File**: `" . $errorData['file'] . "`\n";
        $md .= "- **Line**: " . $errorData['line'] . "\n";
        
        if (!empty($errorData['http_status'])) {
            $md .= "- **HTTP Status**: " . $errorData['http_status'] . "\n";
        }
        
        $md .= "- **Timestamp**: " . $errorData['timestamp'] . "\n\n";
        
        // Request Information
        if (!empty($errorData['request']) && count($errorData['request']) > 0) {
            $md .= "## Request Information\n\n";
            
            foreach ($errorData['request'] as $key => $value) {
                $label = ucfirst(str_replace('_', ' ', $key));
                if (in_array($key, ['uri', 'host'])) {
                    $md .= "- **{$label}**: `{$value}`\n";
                } else {
                    $md .= "- **{$label}**: {$value}\n";
                }
            }
            $md .= "\n";
        }
        
        // Stack Trace
        if (!empty($errorData['trace'])) {
            $md .= "## Stack Trace\n\n";
            
            foreach ($errorData['trace'] as $frame) {
                $md .= "### Frame {$frame['index']}\n\n";
                
                if ($frame['class'] && $frame['function']) {
                    $md .= "**Function**: `{$frame['class']}{$frame['type']}{$frame['function']}()`\n";
                } elseif ($frame['function']) {
                    $md .= "**Function**: `{$frame['function']}()`\n";
                }
                
                $md .= "**Location**: `{$frame['file']}:{$frame['line']}`\n";
                
                // Arguments
                if (!empty($frame['args'])) {
                    $md .= "\n**Arguments**:\n\n";
                    
                    foreach ($frame['args'] as $index => $arg) {
                        $md .= "- **[{$index}]** `{$arg['type']}`: ";
                        
                        if (is_string($arg['value'])) {
                            $value = $arg['value'];
                            if (strlen($value) > 200) {
                                $value = substr($value, 0, 200) . '...';
                            }
                            $md .= "`" . $this->escapeMarkdown($value) . "`";
                        } elseif (is_array($arg['value']) || is_object($arg['value'])) {
                            $json = json_encode($arg['value'], JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES);
                            if (strlen($json) > 500) {
                                $json = substr($json, 0, 500) . "\n  ... (truncated)";
                            }
                            $md .= "\n  ```json\n  " . $json . "\n  ```";
                        } else {
                            $md .= "`" . $this->escapeMarkdown((string)$arg['value']) . "`";
                        }
                        
                        $md .= "\n";
                    }
                }
                
                $md .= "\n";
            }
        }
        
        // System Information
        $md .= "## System Information\n\n";
        $md .= "- **PHP Version**: " . $errorData['php_version'] . "\n";
        $md .= "- **Memory Usage**: " . $this->formatBytes($errorData['memory_usage']) . "\n";
        $md .= "- **Peak Memory**: " . $this->formatBytes($errorData['peak_memory']) . "\n\n";
        
        // Additional Context
        $md .= "## Additional Context\n\n";
        $md .= "This error report was generated by [Crashguard](https://github.com/aksoyih/crashguard), ";
        $md .= "a universal PHP error handling package designed for enhanced debugging and LLM integration.\n\n";
        
        $md .= "### Analysis Suggestions\n\n";
        $md .= "When analyzing this error:\n\n";
        $md .= "1. **Focus on the error message** and the exact line where it occurred\n";
        $md .= "2. **Review the stack trace** to understand the call flow leading to the error\n";
        $md .= "3. **Check function arguments** for unexpected values or types\n";
        $md .= "4. **Consider the request context** if this is a web application error\n";
        $md .= "5. **Look for patterns** in similar errors if this is recurring\n\n";
        
        return $md;
    }

    private function escapeMarkdown(string $text): string
    {
        // Escape special markdown characters
        $characters = ['\\', '`', '*', '_', '{', '}', '[', ']', '(', ')', '#', '+', '-', '.', '!'];
        
        foreach ($characters as $char) {
            $text = str_replace($char, '\\' . $char, $text);
        }
        
        return $text;
    }

    private function formatBytes(int $bytes): string
    {
        $units = ['B', 'KB', 'MB', 'GB'];
        $index = 0;
        
        while ($bytes >= 1024 && $index < count($units) - 1) {
            $bytes /= 1024;
            $index++;
        }
        
        return round($bytes, 2) . ' ' . $units[$index];
    }
}